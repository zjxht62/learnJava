###堆与栈 
####对象的生存空间--堆
####方法调用及局部变量的生存空间--栈
####实例变量  
实例变量被声明在类里而不是方法里面 存在于所属对象中
```java
public class Duck {
    //没个duck都有独立的size
    int size;
}
```

####局部变量
局部变量和方法的参数都是声明在方法中 他们是暂时的 且生命周期只
限于方法被放在栈上的这段期间(也就是方法调用到执行完毕为止)
```java
public void foo(int x) {
    int i = x + 3;
    boolean b = true;
    //x i b 三个都是局部变量
}
```

####要点
所有局部变量都存放在栈上对应的堆栈块内  
对象引用变量和primitive主数据类型变量都是放在栈上  
不管是实例变量或局部变量,**对象**本身都会在堆上

####构造函数  
构造函数并不是方法,在new()的时候执行,也就是在初始一个对象的时候执行
```java
//方法有返回类型 构造函数无返回类型 
//一定与类名相同
public Duck() {
    //构造代码在此
}
```

####调用父类的构造函数的唯一方法是调用super()
```java
public class Duck extends Animal {
    int size;
    
    public Duck(int newSize) {
        super();
        size = newSize;
    }
}
```

###如果我们没有调用super()
####如果你么有编写构造函数
```java
public ClassName() {
    super();
}
```
####如果你有构造函数但没有调用super()
编译器会帮你把所有的重载版本的的构造函数加上super()调用  
加上的一定是super()这个无参数的版本

####this()与super()
使用this()来从某个构造函数调用同一个类的另外的构造函数  
this()只能用在构造函数中,且必须是第一行语句  
super()与this()不能兼得
```java
class R36 extends Car {
    
    Color color;
    
    public R36() {
        //调用本类的构造方法
        this(Color.BLUE);    
    }
    
    public R36(Color c) {
        //调用父类的构造方法
        super("R36");
        color = c;
    }
    
    public R36(int size) {
        //不合法 不能同时调用super()和this()
        //两者只有一个能是第一行语句
        this(Color.ALICEBLUE);
        super(size);
    }
    
    
}
```

####对象的生命周期
1. 局部变量只会存活在声明该变量的方法中
```java
public void read() {
    int s = 42;
    //s 只能用在此方法中
    //当方法结束时候 s会完全消失
}
```
2. 实例变量的寿命和对象相同,如果对象还活着,实例变量也活着
```java
public class Life {
    int size;//这是个实例变量
    
    public void setSize(int s) {
        size = s;
        //s会在方法结束时消失
        //但size在类中 随时可用
    }
}
```
