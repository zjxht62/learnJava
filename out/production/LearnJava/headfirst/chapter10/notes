###静态方法与非静态方法 
####静态的方法不能调用非静态的变量
```java
public class Duck {
    private int size;
    
    public static void main(String[] args){
        //会报错 non-static variable size cannot be referenced from a static context
      System.out.println("Size of duck is" + size);
    }
    
    public void setSize(int s) {
        size = s;
    }
    
    public int getSize() {
        return size;
    }
}
```
####静态的方法也不能调用非静态的方法
```java
public class Duck {
    private int size;
    
    public static void main(String[] args){
        //会报错 non-static variable size cannot be referenced from a static context
      System.out.println("Size of duck is" + getSize());
    }
    
    public void setSize(int s) {
        size = s;
    }
    
    public int getSize() {
        return size;
    }
}
```
####静态变量  
静态变量的值对所有的实例都相同

####静态的final变量是常数
```java
public static final double PI = 3.141492653589793;
```
####静态final变量的初始化
1. 声明的时候
```java
public class Foo {
    public static final int FOO_X = 25;
}
```
2. 在静态初始化程序里
```java
public class Bar {
    public static final double BAR_SIGN;
    //这段程序会在类加载的时候执行
    static {
        BAR_SIGN = (double) Math.random();
    }
}
```

####final的作用
1. 作用在变量上 变量将无法改变
2. 作用在方法上 方法不可被覆盖
3. 作用在类上 不可被继承  

####自动装箱拆箱 autoboxing
```java
public void doNumsNewWay() {
    //创建Integer类型的ArrayList
    ArrayList<Integer> listOfNums = new ArrayList<Integer>();
    //直接加 自动装箱
    listOfNums.add(3);
    //自动拆箱
    int num = listOfNums.get(0);
}
```

####包装的静态方法
```java
String s = "2";
int x = Integer.parseInt(s);
```

####格式化说明的格式
```java
%[argument number][flags][width][.precision]type
//argument number 如果要格式化的参数超过一个 可以在这里指定是哪一个
//flags 特定类型的特定选项 例如数字是否要加逗号或正负号
//width 最小字符数
//.precision 精确度
//type 类型
//%d decimal 参数必须与int相容
//%f floating point 参数必须是浮点数类型
//%x hexadecimal 参数必须是byte short int long BigInteger
//%c character 参数同上 不包括 BigInteger
```


