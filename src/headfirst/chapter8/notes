####抽象类  
abstract修饰 无法实例化  当然可以被继承  
继承抽象类的具体类(如果是抽象类可以不实现父类的抽象方法)必须实现父类所有抽象方法
```java
abstract class Canine extends Animal {
public void roam(){}
} 
```

###抽象方法  
抽象方法代表此方法一定被覆盖过 一般无可通用的实现则为抽象方法
```java
public abstract void eat();
//如果你声明出一个抽象方法,就必须将类也标记为抽象的
//不能在非抽象类中拥有抽象方法
```
###终极对象有什么 object
1.equals(Object o)
```java
Dog a = new Dog():
Cat c = new Cat();
if (a.equals(c)) {
    System.out.println("true");
} else {
    System.out.println("false");
}
```

2.hashCode()
```java
Cat c = new Cat();
System.out.println(c.hashCode());
//列出此对象的哈希代码,可以理解为一个唯一ID
```
3.getClass()
```java
Cat c = new Cat();
System.out.println(c.getClass());
//告诉你此对象是从哪里初始化的
```

4.toString()
```java
Cat c = new Cat();
System.out.println(c.toString());
```


####接口
Java的接口就好像是100%纯抽象类  
所有接口的方法都是抽象的,所以任何pet的类都必须要实现这些方法  
接口的定义:  
```java
public interface Pet{...}
```
接口的实现:
```java
public class Dog extends Canine implements Pet {...}
```
####如何判断应该是设计类 子类 抽象类或者接口呢?  
* 如果新的类无法对其他的类通过is-a测试时,就设计不继承其他类的类
* 只有在需要某类的特殊化版本时,以覆盖或者增加新的方法来继承现有的类
* 当你需要定义一群子类的模板,又不想让程序员初始化模板的时候,设计出抽象类给他们
* 如果想要定义出类可以扮演的角色,使用接口  

